It is a popular open-source build tool developed by the Apache.
It is written in Java and is used to build projects written in C#, Scala, Ruby, etc.
It is based on POM (Project Object Model).

[Core Concepts]
● POM (Project Object Model)
Maven reads pom.xml file to accomplish its configuration and operations.
It is an XML file format that contains information related to the project and configuration information such as dependencies, source directory, plugin, goals, etc.
It is used by Maven to build the project.
Maven searches for the POM file in the current directory when any given task needs to be executed.
● Dependencies and Repositories
Dependencies are external Java libraries required for Project and repositories are directories of packaged JAR files.
The local repository is just a directory on local machine hard drive.
If the dependencies are not found in the local Maven repository, then Maven downloads them from a Central Maven Repository and puts/stores them in the Local Repository.
● Build LifeCycles, Phases and Goals
A Build LifeCycles consists of a sequence of build phases and each build phase consists of a sequence of goals.
Maven command is the name of a build lifecycle, phase or goal.
If a lifecycle is requested executed by giving maven command, all build phases in that life cycle are executed also.
If a build phase is requested executed, all build phases before it in the defined sequence are executed too.
● Build Profiles
It is used to set of configuration values which allows you to build your project using different configurations.
Different build profiles are added to the POM files when enabling different builds.
A build profile helps in customizing the build for different environments.
For example, It may need to build your project for your local computer, for development and test. To enable different builds you can add different build profiles to your POM files using its profiles elements and are triggered in the variety of ways.
● Build Plugins
It is used to perform specific goal.
It can add a plugin to the POM file.
Maven has some standard plugins that can be used and can also implement their own in Java.

[Architecture]
Maven -------Read pom.xml------->> POM File / pom.xml (Dependencies, Plugins, LifeCycles+Phases+Goals, Profiles) -------------->> Maven Repository (Local, Central, Remote)
1. Configure a Maven, which is stored in a pom.xml file.
2. Maven read pom.xml file. The POM file includes all of the configurations that Maven needs.
3. It download the dependencies defined in pom.xml into the Local Repository from the Central Repository OR Remote Repository.
4. It execute LifeCycles, Phases, Goals, Plugins, etc defines in specifies build path.

[Repository]
It is a directory of packaged JAR file with pom.xml file.
Maven searches for dependencies in the repositories.
Maven searches for the dependencies in the following order :-> 'Local Repository' then 'Central Repository' then 'Remote Repository'
                Local Repository ---> Central Repository ---> Remote Repository
Maven Repository Types :-
There are 3 types of Maven Repository.
● Local Repository
It is located in local system.
It is created by the maven when run any maven command.
By default, Maven Local Repository for Linux is "/home/USER_NAME/.m2" and Windows is "C:\Users\USER_NAME\.m2".
The default value is "${user.home}/.m2/repository".
● Central Repository
It refers to the Maven community OR Maven official, when Maven needs to download dependencies.
Suppose those dependencies cannot be found in the Local Repository and Maven downloads the dependencies from Central Repository to Local Repository.
We can view Central Repository by this link (https://search.maven.org/).
● Remote Repository
It refers to the repository present on a Web Server, when Maven needs to download dependencies.
It also downloads these dependencies into Local Repository from Remote Repository.
Maven Repository Settings :-
We can change the location of Maven Local Repository .m2 changing in 2 ways.
If both ("${maven.home}/conf/settings.xml" and "${user.home}/.m2/settings.xml") files exists, their contents gets merged with a specific user 'settings.xml' in '${user.home}/.m2' directory.
● Global Setting - to all users in PC
The 'settings.xml' are also called global settings.
Maven install location path is "${maven.home}/conf/settings.xml".
● User Setting - to a specific user in PC
If need to create for a specific user settings from scratch, it's easiest to copy the global settings from Maven installation location path is "${maven.home}/conf/settings.xml" to user's installation location path is "${user.home}/.m2/settings.xml". (OR) it's easiest to copy the global settings from your Maven installation to your ${user.home}/.m2 directory.
The 'settings.xml' are referred to as user settings.
A user's install location path is "${user.home}/.m2/settings.xml".

[Lifecycle]
There are three built-in Lifecycles:
● Default
It's responsible for project deployment.
● Clean
To clean the project and remove all files generated by the previous build.
● Site
To create the project's site / web site documentation.

[Phases]
Each of these build Lifecycle is defined by a different list of build Phases, wherein a build phase represents a stage in the lifecycle.
The syntax for each Lifecycle Phases "mvn PHASE".
● Default :- The 'default' Lifecycle comprises of the following phases
             These lifecycle phases are executed sequentially to complete the 'default' Lifecycle.
             The 'default' Lifecycle Phases are executed sequentially in a order to use
             * Maven will first validate the project,
             * Then will try to compile the sources,
             * Then run those against the tests,
             * It package the binaries (e.g. jar), run integration tests against that package,
             * It verify the integration tests,
             * It install the verified package to the local repository,
             * Then deploy the installed package to a remote repository.
validate -  validate the project is correct and all necessary information is available.
compile  -  compile the source code of the project.
test     -  test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
package  -  take the compiled code and package it in its distributable format, such as a JAR.
verify   -  run any checks on results of integration tests to ensure quality criteria are met.
install  -  install the package into the local repository, for use as a dependency in other projects locally.
deploy   -  done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.
● Clean
clean      -  remove all files generated by the previous build.
pre-clean
post-clean
● Site
site         -  generate the project's site documentation.
pre-site
post-site
site-deploy  -  deploy the generated site documentation to the specified web server.

[Goals]
A build phase is made up of a set of Goals.
Maven Goals represent a specific task that contributes to the building and managing of a project.
Each phase is a sequence of goals and each goal is responsible for a specific task.
Sometimes, a Maven Goal is not bound to a build phase.
It declaring the plugin goals bound to those build phases.

[Packaging]
It is to set the packaging for your project via the equally named POM element <packaging>.
Some of the valid packaging values are jar, war, ear and pom.
If no packaging value has been specified, it will default to jar.
● pom
It helps to create aggregators and parent projects.
An aggregator or multi-module project assembles submodules coming from different sources.
These submodules are regular Maven projects and follow their own build lifecycles.
The aggregator POM has all the references of submodules under the modules element.
The parent POM shares certain configurations, plugins, and dependencies, along with their versions.
<packaging>pom</packaging>
● jar
It is Java Archive.
Projects with this packaging type produce a compressed zip file with the .jar extension.
It may include pure Java classes, interfaces, resources, and metadata files.
If nothing has been specified, Maven assumes the default packaging type is a jar.
<packaging>jar</packaging>
● war
It is Web Application Archive.
It may include Java servlets, JSPs, HTML pages, a deployment descriptor, and related resources.
<packaging>war</packaging>
● ear
It is Enterprise Application Archive.
It is a compressed file that contains a J2EE application.
It consists of one or more modules that can be either web modules (packaged as a war file) or EJB modules (packaged as a jar file) or both of them.
<packaging>ear</packaging>
● rar
<packaging>rar</packaging>
● par
● ejb
● maven-plugin
There might be cases when default plugins are not sufficient enough.
<packaging>maven-plugin</packaging>
