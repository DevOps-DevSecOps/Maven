It is a popular open-source build tool developed by the Apache.
It is written in Java and is used to build projects written in C#, Scala, Ruby, etc.
It is based on POM (Project Object Model).

[Architecture]


[Repository]
It is a directory of packaged JAR file with pom.xml file.
Maven searches for dependencies in the repositories.
Maven searches for the dependencies in the following order :-> 'Local Repository' then 'Central Repository' then 'Remote Repository'
                Local Repository ---> Central Repository ---> Remote Repository
There are 3 types of Maven Repository.
● Local Repository
It is located in local system.
It is created by the maven when run any maven command.
By default, Maven Local Repository for Linux is "/home/USER_NAME/.m2" and Windows is "C:\Users\USER_NAME\.m2", the .m2 
We can change the location of Maven Local Repository by changing the
● Central Repository

● Remote Repository

[Lifecycle]
There are three built-in Lifecycles:
● default
It's responsible for project deployment.
● clean
To clean the project and remove all files generated by the previous build.
● site
To create the project's site / web site documentation.

[Phases]
Each of these build Lifecycle is defined by a different list of build Phases, wherein a build phase represents a stage in the lifecycle.
● default :- The 'default' Lifecycle comprises of the following phases
             These lifecycle phases are executed sequentially to complete the 'default' Lifecycle.
             The 'default' Lifecycle Phases are executed sequentially in a order to use
             * Maven will first validate the project,
             * Then will try to compile the sources,
             * Then run those against the tests,
             * It package the binaries (e.g. jar), run integration tests against that package,
             * It verify the integration tests,
             * It install the verified package to the local repository,
             * Then deploy the installed package to a remote repository.
validate -  validate the project is correct and all necessary information is available.
compile  -  compile the source code of the project.
test     -  test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
package  -  take the compiled code and package it in its distributable format, such as a JAR.
verify   -  run any checks on results of integration tests to ensure quality criteria are met.
install  -  install the package into the local repository, for use as a dependency in other projects locally.
deploy   -  done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.
● Clean
clean      -  remove all files generated by the previous build
pre-clean
post-clean
● Site
site         -  generate the project's site documentation
pre-site
post-site
site-deploy  -  deploy the generated site documentation to the specified web server

[Goals]
It declaring the plugin goals bound to those build phases.

[Packaging]
It is to set the packaging for your project via the equally named POM element <packaging>.
Some of the valid packaging values are jar, war, ear and pom.
If no packaging value has been specified, it will default to jar.
